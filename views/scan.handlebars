<body style="background-color:#8FD7C7;">
    <form action="./scan" method="post" class="scaning">

        <div class="header">
            <nav id="nav-bar">
                <a href="./start" class="nav-link">HOME</a>

                {{!-- <a href="./tables" class="nav-link">SELECTED-PLAYERS</a> --}}

            </nav>
        </div>
        <br>
        <H1 class="center" style="text-align:center ;">GUESS WICH PLAYER IS THIS ?</H1>
        <H2 class="center" style="text-align:center ;">HINT .....</H2>
        <di id="some_div" style="text-align:center ;"></di>

        <br><br>
        <div class="center" id="data" style="text-align:center ; align-content:flex-start; ">

            {{#each data}}
            <li>{{this.team_name}} </li>
            <li>{{this.position}}</li>
            <li>{{this.jersey_number}}</li>
            {{/each}}
        </div>

    </form>


    {{!-- <div>Teachable Machine Image Model</div> --}}
    {{!-- <button type="button" onclick="init()">Start</button> --}}
    <div id="webcam-container"></div>
    <div id="label-container"></div>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
    <script type="text/javascript">
        // More API functions here:
        // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image
        // the link to your model provided by Teachable Machine export panel
        const URL = "https://teachablemachine.withgoogle.com/models/WT52_-qY5/";
        document.addEventListener("DOMContentLoaded", init())

        let model, webcam, labelContainer, maxPredictions;

        // Load the image model and setup the webcam
        async function init() {
            const modelURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";

            // load the model and metadata
            // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
            // or files from your local hard drive
            // Note: the pose library adds "tmImage" object to your window (window.tmImage)
            model = await tmImage.load(modelURL, metadataURL);
            maxPredictions = model.getTotalClasses();

            setTimeout(() => {
                countdown()
            }, "5000")
            // Convenience function to setup a webcam
            var flip = true; // whether to flip the webcam
            webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
            await webcam.setup(); // request access to the webcam
            await webcam.play();
            window.requestAnimationFrame(loop);

            // append elements to the DOM
            document.getElementById("webcam-container").appendChild(webcam.canvas);
            labelContainer = document.getElementById("label-container");
            for (let i = 0; i < maxPredictions; i++) { // and class labels
                labelContainer.appendChild(document.createElement("div"));
            }
        }
        var timeLeft = 30;
        var elem = document.getElementById('some_div');

        var timerId = setInterval(countdown, 1000);

        function countdown() {
            if (timeLeft == -1) {
                clearTimeout(timerId);
                document.getElementById("data").innerHTML = ""
//                location.reload();
                doSomething();
            } else {
                elem.innerHTML = timeLeft + ' seconds remaining';
                timeLeft--;
            }
        }

        async function loop() {
            webcam.update(); // update the webcam frame
            await predict();
            window.requestAnimationFrame(loop);
        }

        // run the webcam image through the image model
        async function predict() {

            // predict can take in an image, video or canvas html element
            const prediction = await model.predict(webcam.canvas);
            setTimeout(() => {
                console.log("Delayed for 1 second.");
            }, "1000")
            for (let i = 0; i < maxPredictions; i++) {
                console.log(prediction[i].className === "salah")
                const classPrediction =
                    prediction[i].className + ": " + prediction[i].probability.toFixed(2);
                labelContainer.childNodes[i].innerHTML = classPrediction;
            }
        }
    </script>

    {{!--
    <script>


    </script> --}}


</body>