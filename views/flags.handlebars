<body style="background-color:#8FD7C7;">
    <form action="./flags" method="post" class="scaning">

         <div class="header">
            <nav id="nav-bar">
                <a href="./start" class="nav-link">HOME</a>

                {{!-- <a href="./tables" class="nav-link">SELECTED-PLAYERS</a> --}}

            </nav>
        </div> 
        <br><br>
        <H1 class="center" style="text-align:center ;">SCAN THE FLAG OF THIS COUNTRY</H1>
        <h2 style="text-align:center ;">hint.....</h2>
         <di id="some_div" style="text-align:center ;"></di>

        <br><br>
        <div class="center" id="data" style="text-align:center ; align-content:flex-start; ">

            {{#each data}}
            <li>{{this.first_hint}} </li>
            <li>{{this.second_hint}}</li>
            <li>{{this.third_hint}}</li>
            {{/each}}
        </div>

    </form>

{{!-- <div>Teachable Machine Image Model</div> --}}
<button type="button" onclick="init()">Start</button>
<div id="webcam-container"></div>
{{!-- <div id="label-container"></div> --}}
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/7QAQV-pcQ/";

    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
        }
    }
</script>

</body>